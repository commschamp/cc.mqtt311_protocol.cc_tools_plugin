// Generated by commsdsl2tools_qt v6.3.0

#include "Protocol_CC_MQTT_v3_1_1.h"

#include <cassert>
#include "cc_tools_qt/ProtocolBase.h"
#include "cc_tools_qt_plugin/cc_mqtt311/frame/Frame.h"
#include "cc_tools_qt_plugin/cc_mqtt311/frame/FrameTransportMessage.h"

namespace cc_tools_qt_plugin
{

namespace cc_mqtt311
{

namespace plugin
{

class Protocol_CC_MQTT_v3_1_1Impl : public
    cc_tools_qt::ProtocolBase<
        cc_tools_qt_plugin::cc_mqtt311::frame::Frame,
        cc_tools_qt_plugin::cc_mqtt311::frame::FrameTransportMessage
    >
{
    using Base =
        cc_tools_qt::ProtocolBase<
            cc_tools_qt_plugin::cc_mqtt311::frame::Frame,
            cc_tools_qt_plugin::cc_mqtt311::frame::FrameTransportMessage
        >;
public:
    friend class cc_tools_qt_plugin::cc_mqtt311::plugin::Protocol_CC_MQTT_v3_1_1;

    Protocol_CC_MQTT_v3_1_1Impl() = default;
    virtual ~Protocol_CC_MQTT_v3_1_1Impl() = default;

protected:
    virtual const QString& nameImpl() const override
    {
        static const QString Str("CC MQTT v3.1.1");
        return Str;
    }

    using Base::createInvalidMessageImpl;
    using Base::createRawDataMessageImpl;
    using Base::createExtraInfoMessageImpl;
};

Protocol_CC_MQTT_v3_1_1::Protocol_CC_MQTT_v3_1_1()
  : m_pImpl(new Protocol_CC_MQTT_v3_1_1Impl())
{
}

Protocol_CC_MQTT_v3_1_1::~Protocol_CC_MQTT_v3_1_1() = default;

const QString& Protocol_CC_MQTT_v3_1_1::nameImpl() const
{
    return m_pImpl->name();
}

Protocol_CC_MQTT_v3_1_1::MessagesList Protocol_CC_MQTT_v3_1_1::readImpl(const cc_tools_qt::DataInfo& dataInfo, bool final)
{
    return m_pImpl->read(dataInfo, final);
}

cc_tools_qt::DataInfoPtr Protocol_CC_MQTT_v3_1_1::writeImpl(cc_tools_qt::Message& msg)
{
    return m_pImpl->write(msg);
}

Protocol_CC_MQTT_v3_1_1::MessagesList Protocol_CC_MQTT_v3_1_1::createAllMessagesImpl()
{
    return m_pImpl->createAllMessages();
}

cc_tools_qt::MessagePtr Protocol_CC_MQTT_v3_1_1::createMessageImpl(const QString& idAsString, unsigned idx)
{
    return static_cast<cc_tools_qt::Protocol*>(m_pImpl.get())->createMessage(idAsString, idx);
}

Protocol_CC_MQTT_v3_1_1::UpdateStatus Protocol_CC_MQTT_v3_1_1::updateMessageImpl(cc_tools_qt::Message& msg)
{
    return m_pImpl->updateMessage(msg);
}

cc_tools_qt::MessagePtr Protocol_CC_MQTT_v3_1_1::cloneMessageImpl(const cc_tools_qt::Message& msg)
{
    return m_pImpl->cloneMessage(msg);
}

cc_tools_qt::MessagePtr Protocol_CC_MQTT_v3_1_1::createInvalidMessageImpl()
{
    return m_pImpl->createInvalidMessageImpl();
}

cc_tools_qt::MessagePtr Protocol_CC_MQTT_v3_1_1::createRawDataMessageImpl()
{
    return m_pImpl->createRawDataMessageImpl();
}

cc_tools_qt::MessagePtr Protocol_CC_MQTT_v3_1_1::createExtraInfoMessageImpl()
{
    return m_pImpl->createExtraInfoMessageImpl();
}

} // namespace plugin

} // namespace cc_mqtt311

} // namespace cc_tools_qt_plugin
